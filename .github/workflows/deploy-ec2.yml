name: Deploy to EC2 üöÄ

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Add concurrency to ensure only one deployment runs at a time
concurrency:
  group: production
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_JIRA_URL: https://***REMOVED***.atlassian.net
      # Build-time database config for MySQL service container
      DATABASE_URL: mysql://root:root@localhost:3306/timesheet

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: timesheet
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run Prisma Migrations
        run: |
          echo "Running Prisma migrations..."
          npx prisma migrate deploy
          echo "Database is ready with schema!"

      - name: üîÑ Update version
        id: update_version
        run: |
          # Read current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Split version into parts
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"

          # Update package.json
          node -e "
            const fs = require('fs');
            const package = require('./package.json');
            package.version = '$NEW_VERSION';
            fs.writeFileSync('./package.json', JSON.stringify(package, null, 2) + '\n');
          "

          # Configure git
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          # Commit and push changes
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push

          # Set output for later steps
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "release_tag=v${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "release_name=Release v${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: üè∑Ô∏è Get version from package.json
        id: package_version
        run: |
          VERSION=${{ steps.update_version.outputs.version }}
          RELEASE_TAG=${{ steps.update_version.outputs.release_tag }}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "release_name=Release ${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "Using version: ${VERSION}"

      - name: üåç Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: üîë Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: üèóÔ∏è Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ***REMOVED***/timesheet
          VERSION: ${{ steps.package_version.outputs.version }}
          RELEASE_TAG: ${{ steps.package_version.outputs.release_tag }}
        run: |
          echo "::group::üê≥ Docker Build Process"
          echo "üì¶ Building Docker image..."

          # Check available disk space before build
          echo "Available disk space before build:"
          df -h

          # Enable BuildKit with improved layer caching and better space efficiency
          DOCKER_BUILDKIT=1 docker build \
                --progress=plain \
                --no-cache \
                --network=host \
                --build-arg DATABASE_URL="${{ env.DATABASE_URL }}" \
                --build-arg NEXT_PUBLIC_JIRA_URL=${{ env.NEXT_PUBLIC_JIRA_URL }} \
                --build-arg NEXT_TELEMETRY_DISABLED=1 \
                --build-arg NODE_ENV=production \
                -t $ECR_REGISTRY/$ECR_REPOSITORY:${RELEASE_TAG} \
                -t $ECR_REGISTRY/$ECR_REPOSITORY:latest . || {
              echo "::error::Docker build failed"
              echo "Checking disk space after failure:"
              df -h
              docker system df
              exit 1
            }

          # Show available disk space after build
          echo "Available disk space after build:"
          df -h

          # Show image details after successful build
          echo "üìã Image details:"
          docker images $ECR_REGISTRY/$ECR_REPOSITORY:${RELEASE_TAG} --format "ID: {{.ID}}\nSize: {{.Size}}\nCreated: {{.CreatedSince}}"
          echo "::endgroup::"

          echo "::group::‚¨ÜÔ∏è Docker Push Process"
          echo "‚¨ÜÔ∏è Pushing image to ECR..."
          if ! docker push $ECR_REGISTRY/$ECR_REPOSITORY:${RELEASE_TAG} || ! docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest; then
            echo "::error::Failed to push Docker image to ECR"
            exit 1
          fi

          # Show push summary
          echo "üìä Push summary:"
          docker image inspect $ECR_REGISTRY/$ECR_REPOSITORY:${RELEASE_TAG} --format 'Repository: {{.RepoTags}}\nSize: {{.Size}} bytes\nLayers: {{len .RootFS.Layers}}'
          echo "::endgroup::"

      - name: üìù Create and update deployment status
        uses: actions/github-script@v7
        env:
          VERSION: ${{ steps.package_version.outputs.version }}
          RELEASE_TAG: ${{ steps.package_version.outputs.release_tag }}
        with:
          script: |
            const version = '${{ steps.package_version.outputs.version }}';
            const releaseTag = '${{ steps.package_version.outputs.release_tag }}';

            // Create deployment
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: [],
              production_environment: true,
              description: `Deploying version ${version}`
            });

            // Update deployment status
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: 'https://${{ vars.EC2_HOST }}',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: `Successfully deployed version ${version}!`
            });

            // Create GitHub Release
            const changelog = `
            ## What's Changed
            * Automated deployment of version ${version}
            * Deployment timestamp: ${new Date().toISOString()}
            * Commit: ${context.sha}

            ## Installation
            This release has been automatically deployed to production.

            ## Additional Notes
            * Docker image tag: \`${releaseTag}\`
            * Environment: Production
            `;

            try {
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: releaseTag,
                name: `${releaseTag}`,
                body: changelog,
                draft: false,
                prerelease: false,
                generate_release_notes: true
              });
              console.log(`Successfully created release ${releaseTag}`);
            } catch (error) {
              if (error.status === 422) {
                console.log(`Release ${releaseTag} already exists, skipping creation`);
              } else {
                throw error;
              }
            }
