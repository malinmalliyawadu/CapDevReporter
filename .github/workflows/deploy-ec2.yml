name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ***REMOVED***/timesheet
          IMAGE_TAG: latest
        run: |
          docker build \
            --build-arg DATABASE_URL="file:./dev.db" \
            --build-arg NEXT_PUBLIC_JIRA_HOST=https://***REMOVED***.atlassian.net \
            --build-arg JIRA_API_TOKEN=${{ secrets.JIRA_API_TOKEN }} \
            --build-arg JIRA_USER_EMAIL=malin.malliyawadu@***REMOVED***.com \
            --build-arg JIRA_HOST=***REMOVED***.atlassian.net \
            --build-arg IPAYROLL_API_URL=https://api.ipayroll.com \
            --build-arg IPAYROLL_API_KEY=hehe \
            --build-arg IPAYROLL_COMPANY_ID=1234567890 \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ vars.EC2_HOST }}
          EC2_USERNAME: ubuntu
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ***REMOVED***/timesheet
          IMAGE_TAG: latest
        run: |
          # Write the private key to a file
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # Create deployment script
          echo '#!/bin/bash
          # Stop and remove existing container
          docker stop timesheet-app || true
          docker rm timesheet-app || true

          # Login to ECR
          aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

          # Pull and run new container
          docker pull ${{ steps.login-ecr.outputs.registry }}/***REMOVED***/timesheet:latest
          docker run -d \
            --name=timesheet-app \
            --restart=always \
            -p 3000:3000 \
            -v /app/data:/app/data \
            ${{ steps.login-ecr.outputs.registry }}/***REMOVED***/timesheet:latest

          # Verify container is running
          if ! docker ps | grep -q timesheet-app; then
            echo "Container failed to start"
            docker logs timesheet-app
            exit 1
          fi' > deploy.sh

          # Copy and execute the deployment script
          scp -i private_key.pem -o StrictHostKeyChecking=no deploy.sh $EC2_USERNAME@$EC2_HOST:~/deploy.sh
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "chmod +x ~/deploy.sh && ~/deploy.sh"

          # Cleanup
          rm private_key.pem deploy.sh
