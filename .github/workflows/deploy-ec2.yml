name: üöÄ Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Add concurrency to ensure only one deployment runs at a time
concurrency:
  group: production
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_JIRA_URL: https://***REMOVED***.atlassian.net

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîÑ Update version
        id: update_version
        run: |
          # Read current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Split version into parts
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"

          # Update package.json
          node -e "
            const fs = require('fs');
            const package = require('./package.json');
            package.version = '$NEW_VERSION';
            fs.writeFileSync('./package.json', JSON.stringify(package, null, 2) + '\n');
          "

          # Configure git
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          # Commit and push changes
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push

          # Set output for later steps
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "release_tag=v${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "release_name=Release v${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: üè∑Ô∏è Get version from package.json
        id: package_version
        run: |
          VERSION=${{ steps.update_version.outputs.version }}
          RELEASE_TAG=${{ steps.update_version.outputs.release_tag }}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "release_name=Release ${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "Using version: ${VERSION}"

      - name: üåç Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: üîë Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: üèóÔ∏è Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ***REMOVED***/timesheet
          VERSION: ${{ steps.package_version.outputs.version }}
          RELEASE_TAG: ${{ steps.package_version.outputs.release_tag }}
        run: |
          echo "::group::üê≥ Docker Build Process"
          echo "üì¶ Building Docker image..."

          # Use Docker's built-in progress formatting
          DOCKER_BUILDKIT=1 docker build \
            --progress=plain \
            --no-cache \
            --build-arg DATABASE_URL="file:./dev.db" \
            --build-arg NEXT_PUBLIC_JIRA_URL=${{ env.NEXT_PUBLIC_JIRA_URL }} \
            --build-arg JIRA_API_TOKEN=${{ secrets.JIRA_API_TOKEN }} \
            --build-arg JIRA_USER_EMAIL=malin.malliyawadu@***REMOVED***.com \
            --build-arg JIRA_HOST=***REMOVED***.atlassian.net \
            --build-arg IPAYROLL_API_URL=https://api.ipayroll.com \
            --build-arg IPAYROLL_API_KEY=hehe \
            --build-arg IPAYROLL_COMPANY_ID=1234567890 \
            --label "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --label "org.opencontainers.image.version=${VERSION}" \
            --label "org.opencontainers.image.revision=${GITHUB_SHA}" \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:${RELEASE_TAG} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest . || {
              echo "::error::Docker build failed"
              exit 1
            }

          # Show image details after successful build
          echo "üìã Image details:"
          docker images $ECR_REGISTRY/$ECR_REPOSITORY:${RELEASE_TAG} --format "ID: {{.ID}}\nSize: {{.Size}}\nCreated: {{.CreatedSince}}"
          echo "::endgroup::"

          echo "::group::‚¨ÜÔ∏è Docker Push Process"
          echo "‚¨ÜÔ∏è Pushing image to ECR..."
          if ! docker push $ECR_REGISTRY/$ECR_REPOSITORY:${RELEASE_TAG} || ! docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest; then
            echo "::error::Failed to push Docker image to ECR"
            exit 1
          fi

          # Show push summary
          echo "üìä Push summary:"
          docker image inspect $ECR_REGISTRY/$ECR_REPOSITORY:${RELEASE_TAG} --format 'Repository: {{.RepoTags}}\nSize: {{.Size}} bytes\nLayers: {{len .RootFS.Layers}}'
          echo "::endgroup::"

      - name: üöÄ Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ vars.EC2_HOST }}
          EC2_USERNAME: ubuntu
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ***REMOVED***/timesheet
          VERSION: ${{ steps.package_version.outputs.version }}
          RELEASE_TAG: ${{ steps.package_version.outputs.release_tag }}
        run: |
          echo "::group::üîë SSH Setup"
          echo "Setting up SSH keys..."
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          echo "::endgroup::"

          echo "::group::üìù Deployment Script Creation"
          echo "Creating deployment script..."
          echo '#!/bin/bash
          echo "::group::üõë Container Management"
          echo "Stopping existing container..."
          if ! docker stop timesheet-app 2>/dev/null; then
            echo "::warning::No existing container to stop"
          fi
          docker rm timesheet-app 2>/dev/null || true
          echo "::endgroup::"

          echo "::group::üîë ECR Authentication"
          echo "Logging into ECR..."
          if ! aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}; then
            echo "::error::Failed to authenticate with ECR"
            exit 1
          fi
          echo "::endgroup::"

          echo "::group::‚¨áÔ∏è Image Pull"
          echo "Pulling new container image..."
          if ! docker pull ${{ steps.login-ecr.outputs.registry }}/***REMOVED***/timesheet:latest; then
            echo "::error::Failed to pull latest image"
            exit 1
          fi
          echo "::endgroup::"

          echo "::group::üöÄ Container Launch"
          echo "Starting new container..."
          if ! docker run -d \
            --name=timesheet-app \
            --restart=always \
            -p 3000:3000 \
            -v /app/data:/app/data \
            -e NEXT_PUBLIC_JIRA_URL='${{ env.NEXT_PUBLIC_JIRA_URL }}' \
            -e APP_VERSION='${VERSION}' \
            '${{ steps.login-ecr.outputs.registry }}/***REMOVED***/timesheet:latest'; then
            echo "::error::Failed to start container"
            exit 1
          fi

          echo "Verifying container status..."
          if ! docker ps | grep -q timesheet-app; then
            echo "::error::Container failed to start"
            docker logs timesheet-app
            exit 1
          fi
          echo "::endgroup::"

          echo "::group::üìä System Status"
          echo "Initial disk usage:"
          docker system df
          echo "::endgroup::"

          echo "::group::üßπ Cleanup Process"
          echo "Starting cleanup process..."

          echo "Removing unused images older than 24 hours..."
          docker image prune -af --filter "until=24h" || echo "::warning::Failed to prune images"

          echo "Removing unused containers..."
          docker container prune -f || echo "::warning::Failed to prune containers"

          echo "Removing unused networks..."
          docker network prune -f || echo "::warning::Failed to prune networks"

          echo "Removing unused volumes..."
          docker volume prune -f --filter "label!=preserve=true" || echo "::warning::Failed to prune volumes"

          echo "Final disk usage after cleanup:"
          docker system df

          echo "Available disk space:"
          df -h
          echo "::endgroup::"' > deploy.sh

          echo "::group::üì§ Script Deployment"
          echo "Copying deployment script to EC2..."
          if ! scp -i private_key.pem -o StrictHostKeyChecking=no deploy.sh $EC2_USERNAME@$EC2_HOST:~/deploy.sh; then
            echo "::error::Failed to copy deployment script to EC2"
            exit 1
          fi

          echo "Executing deployment script..."
          if ! ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "chmod +x ~/deploy.sh && ~/deploy.sh"; then
            echo "::error::Deployment script execution failed"
            exit 1
          fi
          echo "::endgroup::"

          echo "::group::üßπ Cleanup"
          echo "Cleaning up local files..."
          rm private_key.pem deploy.sh
          echo "::endgroup::"

      - name: üìù Create and update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const version = process.env.VERSION;
            const releaseTag = process.env.RELEASE_TAG;

            // Create deployment
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: [],
              production_environment: true,
              description: `Deploying version ${version}`
            });

            // Update deployment status
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: 'https://${{ vars.EC2_HOST }}',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: `Successfully deployed version ${version}!`
            });

            // Create GitHub Release
            const changelog = `
            ## What's Changed
            * Automated deployment of version ${version}
            * Deployment timestamp: ${new Date().toISOString()}
            * Commit: ${context.sha}

            ## Installation
            This release has been automatically deployed to production.

            ## Additional Notes
            * Docker image tag: \`${releaseTag}\`
            * Environment: Production
            `;

            try {
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: releaseTag,
                name: `Release ${releaseTag}`,
                body: changelog,
                draft: false,
                prerelease: false,
                generate_release_notes: true
              });
              console.log(`Successfully created release ${releaseTag}`);
            } catch (error) {
              if (error.status === 422) {
                console.log(`Release ${releaseTag} already exists, skipping creation`);
              } else {
                throw error;
              }
            }
