name: Playwright Tests 🎭
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
jobs:
  playwright-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: 📦 Install dependencies
        run: |
          npm ci

      - name: 🗃️ Initialize database
        env:
          DATABASE_URL: file:./dev.db
        run: |
          npx prisma generate
          npx prisma migrate reset --force

      - name: 🎭 Install Playwright Browsers
        run: |
          npx playwright install --with-deps

      - name: 🧪 Run Playwright tests
        env:
          DATABASE_URL: file:./dev.db
          IPAYROLL_API_KEY: hehe
          IPAYROLL_COMPANY_ID: 1234567890
          IPAYROLL_API_URL: https://api.ipayroll.com
          NEXT_PUBLIC_JIRA_URL: https://***REMOVED***.atlassian.net
          JIRA_HOST: ***REMOVED***.atlassian.net
          JIRA_API_TOKEN: hehe
          JIRA_USER_EMAIL: hahaha@gmail.com
        run: |
          npx playwright test --shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }} --reporter=html,json,line --coverage

      - name: 📊 Upload test results
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: blob-report-${{ matrix.shardIndex }}
          path: blob-report
          retention-days: 1

      - name: 📈 Upload coverage results
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.shardIndex }}
          path: playwright-coverage
          retention-days: 1

  merge-reports:
    if: ${{ !cancelled() }}
    needs: [playwright-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm ci

      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: blob-report-*
          merge-multiple: true

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          path: all-coverage-reports
          pattern: coverage-report-*
          merge-multiple: true

      - name: Merge into HTML Report
        run: npx playwright merge-reports --reporter html ./all-blob-reports

      - name: Generate coverage report
        run: npx playwright merge-reports --reporter html ./all-coverage-reports

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: html-report--attempt-${{ github.run_attempt }}
          path: playwright-report
          retention-days: 14

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report--attempt-${{ github.run_attempt }}
          path: playwright-coverage
          retention-days: 14

  post-coverage:
    if: github.event_name == 'pull_request'
    needs: [merge-reports]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report--attempt-${{ github.run_attempt }}
          path: coverage-report

      - name: Post coverage comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read the coverage summary
            const summaryPath = path.join(process.env.GITHUB_WORKSPACE, 'coverage-report', 'index.html');
            const coverageData = fs.readFileSync(summaryPath, 'utf8');

            // Extract coverage percentage (this is a simple example, adjust based on your needs)
            const coverageMatch = coverageData.match(/Total Coverage: (\d+\.\d+)%/);
            const coverage = coverageMatch ? coverageMatch[1] : 'N/A';

            const comment = `## 📊 Test Coverage Report

            Total Coverage: ${coverage}%

            [View detailed coverage report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;

            // Post comment on PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Test Coverage Report')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
