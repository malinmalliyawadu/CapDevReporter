name: Deploy to ECS üöÄ

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Add concurrency to ensure only one deployment runs at a time
concurrency:
  group: production
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_JIRA_URL: https://***REMOVED***.atlassian.net
      # Build-time database config for MySQL service container
      DATABASE_URL: mysql://root:password@localhost:3306/timesheet
      # ECS deployment config
      ECS_CLUSTER: timesheet-cluster
      ECS_SERVICE: timesheet-service

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: timesheet
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      - name: Run Prisma Migrations
        run: |
          echo "Running Prisma migrations..."
          npx prisma migrate deploy
          echo "Database is ready with schema!"

      - name: üîÑ Update version
        id: update_version
        run: |
          # Read current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Split version into parts
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"

          # Update package.json
          node -e "
            const fs = require('fs');
            const package = require('./package.json');
            package.version = '$NEW_VERSION';
            fs.writeFileSync('./package.json', JSON.stringify(package, null, 2) + '\n');
          "

          # Configure git
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          # Commit and push changes
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push

          # Set output for later steps
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "release_tag=v${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "release_name=Release v${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: üè∑Ô∏è Get version from package.json
        id: package_version
        run: |
          VERSION=${{ steps.update_version.outputs.version }}
          RELEASE_TAG=${{ steps.update_version.outputs.release_tag }}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "release_name=Release ${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "Using version: ${VERSION}"

      - name: üåç Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: üîë Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: üèóÔ∏è Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ***REMOVED***/timesheet
          VERSION: ${{ steps.package_version.outputs.version }}
          RELEASE_TAG: ${{ steps.package_version.outputs.release_tag }}
        run: |
          echo "::group::üê≥ Docker Build Process"
          echo "üì¶ Building Docker image..."

          # Enable BuildKit with improved layer caching and better space efficiency
          DOCKER_BUILDKIT=1 docker build \
                --progress=plain \
                --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:latest \
                --build-arg BUILDKIT_INLINE_CACHE=1 \
                --network=host \
                --build-arg DATABASE_URL="${{ env.DATABASE_URL }}" \
                --build-arg NEXT_PUBLIC_JIRA_URL=${{ env.NEXT_PUBLIC_JIRA_URL }} \
                --build-arg NEXT_TELEMETRY_DISABLED=1 \
                --build-arg NODE_ENV=production \
                -t $ECR_REGISTRY/$ECR_REPOSITORY:${RELEASE_TAG} \
                -t $ECR_REGISTRY/$ECR_REPOSITORY:latest . || {
              echo "::error::Docker build failed"
              echo "Checking disk space after failure:"
              df -h
              docker system df
              exit 1
            }

          # Show image details after successful build
          echo "üìã Image details:"
          docker images $ECR_REGISTRY/$ECR_REPOSITORY:${RELEASE_TAG} --format "ID: {{.ID}}\nSize: {{.Size}}\nCreated: {{.CreatedSince}}"
          echo "::endgroup::"

          echo "::group::‚¨ÜÔ∏è Docker Push Process"
          echo "‚¨ÜÔ∏è Pushing image to ECR..."
          if ! docker push $ECR_REGISTRY/$ECR_REPOSITORY:${RELEASE_TAG} || ! docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest; then
            echo "::error::Failed to push Docker image to ECR"
            exit 1
          fi

          # Show push summary
          echo "üìä Push summary:"
          docker image inspect $ECR_REGISTRY/$ECR_REPOSITORY:${RELEASE_TAG} --format 'Repository: {{.RepoTags}}\nSize: {{.Size}} bytes\nLayers: {{len .RootFS.Layers}}'
          echo "::endgroup::"

      - name: üöÄ Force new ECS deployment
        run: |
          echo "Forcing new deployment of ECS service..."
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment
          echo "Deployment triggered, waiting for it to start..."

          # Wait a moment for the deployment to register in AWS
          sleep 30

          echo "Monitoring deployment status..."

          # Initialize variables
          STABLE=false
          TIMEOUT=1800  # 30 minutes timeout
          START_TIME=$(date +%s)
          CHECK_INTERVAL=30  # Check every 30 seconds (increased from 15)
          CONSECUTIVE_STABLE_CHECKS=0
          REQUIRED_STABLE_CHECKS=3  # Require 3 consecutive stable checks

          while [ "$STABLE" != "true" ]; do
            # Get current time and calculate elapsed time
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))
            
            # Check if we've exceeded the timeout
            if [ $ELAPSED -gt $TIMEOUT ]; then
              echo "::error::Deployment timed out after $(($TIMEOUT / 60)) minutes"
              exit 1
            fi
            
            # Get deployment status
            DEPLOYMENT_INFO=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[0].deployments')
            
            # Count number of deployments
            DEPLOYMENT_COUNT=$(echo "$DEPLOYMENT_INFO" | jq 'length')
            echo "Current deployment count: $DEPLOYMENT_COUNT"
            
            # Extract primary deployment details
            PRIMARY_DEPLOYMENT=$(echo "$DEPLOYMENT_INFO" | jq '.[] | select(.status == "PRIMARY")')
            DESIRED_COUNT=$(echo "$PRIMARY_DEPLOYMENT" | jq -r '.desiredCount')
            RUNNING_COUNT=$(echo "$PRIMARY_DEPLOYMENT" | jq -r '.runningCount')
            PENDING_COUNT=$(echo "$PRIMARY_DEPLOYMENT" | jq -r '.pendingCount')
            FAILED_TASKS=$(echo "$PRIMARY_DEPLOYMENT" | jq -r '.failedTasks')
            DEPLOYMENT_ID=$(echo "$PRIMARY_DEPLOYMENT" | jq -r '.id')
            
            # Get deployment status from events (last 5 events)
            RECENT_EVENTS=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[0].events[0:5]')
            LATEST_EVENT=$(echo "$RECENT_EVENTS" | jq -r '.[0].message')
            
            # Print status update
            echo "‚è±Ô∏è Deployment status after $((ELAPSED / 60))m $((ELAPSED % 60))s:"
            echo "üîÑ Deployment ID: $DEPLOYMENT_ID"
            echo "üîÑ Tasks: $RUNNING_COUNT running, $PENDING_COUNT pending, $FAILED_TASKS failed (of $DESIRED_COUNT desired)"
            echo "üìù Latest event: $LATEST_EVENT"
            
            # Check if there are any active previous deployments
            PREVIOUS_DEPLOYMENTS=$(echo "$DEPLOYMENT_INFO" | jq '[.[] | select(.status != "PRIMARY")] | length')
            echo "Previous deployments still active: $PREVIOUS_DEPLOYMENTS"
            
            # Check if deployment is stable (all desired tasks are running, no pending tasks, and no previous deployments)
            if [ "$RUNNING_COUNT" -eq "$DESIRED_COUNT" ] && [ "$PENDING_COUNT" -eq 0 ] && [ "$PREVIOUS_DEPLOYMENTS" -eq 0 ]; then
              # Check if service is stable by checking the deployment status
              SERVICE_STATUS=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[0].status' --output text)
              
              if [ "$SERVICE_STATUS" = "ACTIVE" ]; then
                CONSECUTIVE_STABLE_CHECKS=$((CONSECUTIVE_STABLE_CHECKS + 1))
                echo "‚úÖ Service appears stable ($CONSECUTIVE_STABLE_CHECKS/$REQUIRED_STABLE_CHECKS consecutive checks)"
                
                if [ $CONSECUTIVE_STABLE_CHECKS -ge $REQUIRED_STABLE_CHECKS ]; then
                  STABLE=true
                  echo "‚úÖ Deployment stabilized successfully after $REQUIRED_STABLE_CHECKS consecutive stable checks!"
                else
                  echo "‚è≥ Waiting for additional confirmation... (checking again in ${CHECK_INTERVAL}s)"
                  sleep $CHECK_INTERVAL
                fi
              else
                CONSECUTIVE_STABLE_CHECKS=0
                echo "‚ö†Ô∏è Service appears stable but status is $SERVICE_STATUS. Continuing to monitor..."
                sleep $CHECK_INTERVAL
              fi
            else
              CONSECUTIVE_STABLE_CHECKS=0
              echo "‚è≥ Waiting for deployment to stabilize... (checking again in ${CHECK_INTERVAL}s)"
              sleep $CHECK_INTERVAL
            fi
          done

          echo "‚úÖ Deployment completed successfully!"

          # Show final deployment details
          echo "üìä Final deployment summary:"
          aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].{Status:status,TaskDefinition:taskDefinition,DesiredCount:desiredCount,RunningCount:runningCount,PendingCount:pendingCount,ServiceName:serviceName}' \
            --output table

      - name: üìù Create GitHub Release
        env:
          VERSION: ${{ steps.package_version.outputs.version }}
          RELEASE_TAG: ${{ steps.package_version.outputs.release_tag }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CHANGELOG="## What's Changed
          * Automated deployment of version ${VERSION}
          * Deployment timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          * Commit: ${GITHUB_SHA}

          ## Installation
          This release has been automatically deployed to production.

          ## Additional Notes
          * Docker image tag: \`${RELEASE_TAG}\`
          * Environment: Production
          * Deployed to ECS Service: \`${{ env.ECS_SERVICE }}\`
          * ECS Cluster: \`${{ env.ECS_CLUSTER }}\`"

          # Create GitHub Release using GitHub CLI
          echo "$CHANGELOG" | gh release create "${RELEASE_TAG}" --title "${RELEASE_TAG}" --notes-file - || {
            echo "Release ${RELEASE_TAG} may already exist, checking..."
            if ! gh release view "${RELEASE_TAG}" &>/dev/null; then
              echo "::error::Failed to create or find release ${RELEASE_TAG}"
              exit 1
            else
              echo "Release ${RELEASE_TAG} already exists, skipping creation"
            fi
          }
